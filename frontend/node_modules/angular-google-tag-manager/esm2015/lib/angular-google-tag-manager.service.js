/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-google-tag-manager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import * as i0 from "@angular/core";
export class GoogleTagManagerService {
    /**
     * @param {?=} config
     * @param {?=} googleTagManagerId
     * @param {?=} googleTagManagerAuth
     * @param {?=} googleTagManagerPreview
     */
    constructor(config = { id: null }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview) {
        this.config = config;
        this.googleTagManagerId = googleTagManagerId;
        this.googleTagManagerAuth = googleTagManagerAuth;
        this.googleTagManagerPreview = googleTagManagerPreview;
        this.isLoaded = false;
        this.browserGlobals = {
            /**
             * @return {?}
             */
            windowRef() {
                return window;
            },
            /**
             * @return {?}
             */
            documentRef() {
                return document;
            },
        };
        if (this.config == null) {
            this.config = { id: null };
        }
        this.config = Object.assign(Object.assign({}, this.config), { id: googleTagManagerId || this.config.id, gtm_auth: googleTagManagerAuth || this.config.gtm_auth, gtm_preview: googleTagManagerPreview || this.config.gtm_preview });
        if (this.config.id == null) {
            throw new Error('Google tag manager ID not provided.');
        }
    }
    /**
     * @return {?}
     */
    getDataLayer() {
        /** @type {?} */
        const window = this.browserGlobals.windowRef();
        window.dataLayer = window.dataLayer || [];
        return window.dataLayer;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    pushOnDataLayer(obj) {
        /** @type {?} */
        const dataLayer = this.getDataLayer();
        dataLayer.push(obj);
    }
    /**
     * @return {?}
     */
    addGtmToDom() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this.isLoaded) {
                return resolve(this.isLoaded);
            }
            /** @type {?} */
            const doc = this.browserGlobals.documentRef();
            this.pushOnDataLayer({
                'gtm.start': new Date().getTime(),
                event: 'gtm.js',
            });
            /** @type {?} */
            const gtmScript = doc.createElement('script');
            gtmScript.id = 'GTMscript';
            gtmScript.async = true;
            gtmScript.src = this.applyGtmQueryParams('https://www.googletagmanager.com/gtm.js');
            gtmScript.addEventListener('load', (/**
             * @return {?}
             */
            () => {
                return resolve(this.isLoaded = true);
            }));
            gtmScript.addEventListener('error', (/**
             * @return {?}
             */
            () => {
                return reject(false);
            }));
            doc.head.insertBefore(gtmScript, doc.head.firstChild);
        }));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    pushTag(item) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (!this.isLoaded) {
                this.addGtmToDom().then((/**
                 * @return {?}
                 */
                () => {
                    this.pushOnDataLayer(item);
                    return resolve();
                })).catch((/**
                 * @return {?}
                 */
                () => reject()));
            }
            this.pushOnDataLayer(item);
            return resolve();
        }));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    applyGtmQueryParams(url) {
        if (url.indexOf('?') === -1) {
            url += '?';
        }
        return (url +
            Object.keys(this.config)
                .filter((/**
             * @param {?} k
             * @return {?}
             */
            (k) => this.config[k]))
                .map((/**
             * @param {?} k
             * @return {?}
             */
            (k) => `${k}=${this.config[k]}`))
                .join('&'));
    }
}
GoogleTagManagerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
GoogleTagManagerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerConfig',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerId',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerAuth',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerPreview',] }] }
];
/** @nocollapse */ GoogleTagManagerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleTagManagerService_Factory() { return new GoogleTagManagerService(i0.ɵɵinject("googleTagManagerConfig", 8), i0.ɵɵinject("googleTagManagerId", 8), i0.ɵɵinject("googleTagManagerAuth", 8), i0.ɵɵinject("googleTagManagerPreview", 8)); }, token: GoogleTagManagerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.browserGlobals;
    /** @type {?} */
    GoogleTagManagerService.prototype.config;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerId;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerAuth;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerPreview;
}
//# sourceMappingURL=data:application/json;base64,