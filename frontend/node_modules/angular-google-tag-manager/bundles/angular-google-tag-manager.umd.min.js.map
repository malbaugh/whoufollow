{"version":3,"sources":["../../projects/angular-google-tag-manager/src/lib/angular-google-tag-manager.service.ts","../../projects/angular-google-tag-manager/src/lib/angular-google-tag-manager.module.ts"],"names":["GoogleTagManagerService","config","googleTagManagerId","googleTagManagerAuth","googleTagManagerPreview","id","this","isLoaded","browserGlobals","windowRef","window","documentRef","document","Object","assign","gtm_auth","gtm_preview","Error","prototype","getDataLayer","dataLayer","pushOnDataLayer","obj","push","addGtmToDom","_this","Promise","resolve","reject","doc","gtm.start","Date","getTime","event","gtmScript","createElement","async","src","applyGtmQueryParams","addEventListener","head","insertBefore","firstChild","pushTag","item","then","catch","url","indexOf","keys","filter","k","map","join","Injectable","args","providedIn","Optional","type","Inject","GoogleTagManagerModule","forRoot","ngModule","providers","provide","useValue","NgModule"],"mappings":"wWAkBE,SAAAA,EAGSC,EAC0CC,EAG1CC,EAGAC,GAYP,QAnBO,IAAAH,IAAAA,EAAA,CAAmCI,GAAI,OAAvCC,KAAAL,OAAAA,EAC0CK,KAAAJ,mBAAAA,EAG1CI,KAAAH,qBAAAA,EAGAG,KAAAF,wBAAAA,EArBDE,KAAAC,UAAW,EAEXD,KAAAE,eAAiB,CACvBC,UAAS,WACP,OAAOC,QAETC,YAAW,WACT,OAAOC,WAgBU,MAAfN,KAAKL,SACPK,KAAKL,OAAS,CAAEI,GAAI,OAGtBC,KAAKL,OAAMY,OAAAC,OAAAD,OAAAC,OAAA,GACNR,KAAKL,QAAM,CACdI,GAAIH,GAAsBI,KAAKL,OAAOI,GACtCU,SAAUZ,GAAwBG,KAAKL,OAAOc,SAC9CC,YAAaZ,GAA2BE,KAAKL,OAAOe,cAEhC,MAAlBV,KAAKL,OAAOI,GACd,MAAM,IAAIY,MAAM,8CAIbjB,EAAAkB,UAAAC,aAAA,eACCT,EAASJ,KAAKE,eAAeC,YAEnC,OADAC,EAAOU,UAAYV,EAAOU,WAAa,GAChCV,EAAOU,WAGRpB,EAAAkB,UAAAG,gBAAA,SAAgBC,GACJhB,KAAKa,eACbI,KAAKD,IAGVtB,EAAAkB,UAAAM,YAAA,WAAA,IAAAC,EAAAnB,KACL,OAAO,IAAIoB,SAAO,SAAEC,EAASC,GAC3B,GAAIH,EAAKlB,SACP,OAAOoB,EAAQF,EAAKlB,cAEhBsB,EAAMJ,EAAKjB,eAAeG,cAChCc,EAAKJ,gBAAgB,CACnBS,aAAa,IAAIC,MAAOC,UACxBC,MAAO,eAGHC,EAAYL,EAAIM,cAAc,UACpCD,EAAU7B,GAAK,YACf6B,EAAUE,OAAQ,EAClBF,EAAUG,IAAMZ,EAAKa,oBACnB,2CAEFJ,EAAUK,iBAAiB,QAAM,WAC/B,OAAOZ,EAAQF,EAAKlB,UAAW,MAEjC2B,EAAUK,iBAAiB,SAAO,WAChC,OAAOX,GAAO,MAEhBC,EAAIW,KAAKC,aAAaP,EAAWL,EAAIW,KAAKE,gBAIvC1C,EAAAkB,UAAAyB,QAAA,SAAQC,GAAR,IAAAnB,EAAAnB,KACL,OAAO,IAAIoB,SAAO,SAAQC,EAASC,GAQjC,OAPKH,EAAKlB,UACRkB,EAAKD,cAAcqB,MAAI,WAErB,OADApB,EAAKJ,gBAAgBuB,GACdjB,OACNmB,OAAK,WAAO,OAAAlB,OAEjBH,EAAKJ,gBAAgBuB,GACdjB,QAIH3B,EAAAkB,UAAAoB,oBAAA,SAAoBS,GAApB,IAAAtB,EAAAnB,KAKN,OAJ0B,IAAtByC,EAAIC,QAAQ,OACdD,GAAO,KAIPA,EACAlC,OAAOoC,KAAK3C,KAAKL,QACdiD,QAAM,SAAEC,GAAM,OAAA1B,EAAKxB,OAAOkD,MAC1BC,KAAG,SAAED,GAAM,OAAGA,EAAC,IAAI1B,EAAKxB,OAAOkD,MAC/BE,KAAK,+BAvGbC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAeTC,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,4DAEPE,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMJ,KAAA,CAAC,wDACnBE,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,0DAEPE,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,oSCvBZ,SAAAK,YACgBA,EAAAC,QAAP,SACL5D,GAEA,MAAO,CACL6D,SAAUF,EACVG,UAAW,CAAC,CAAEC,QAAS,yBAA0BC,SAAUhE,+BAPhEiE,EAAAA","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { GoogleTagManagerConfig } from './google-tag-manager-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleTagManagerService {\n  private isLoaded = false;\n\n  private browserGlobals = {\n    windowRef(): any {\n      return window;\n    },\n    documentRef(): any {\n      return document;\n    },\n  };\n\n  constructor(\n    @Optional()\n    @Inject('googleTagManagerConfig')\n    public config: GoogleTagManagerConfig = { id: null },\n    @Optional() @Inject('googleTagManagerId') public googleTagManagerId: string,\n    @Optional()\n    @Inject('googleTagManagerAuth')\n    public googleTagManagerAuth: string,\n    @Optional()\n    @Inject('googleTagManagerPreview')\n    public googleTagManagerPreview: string\n  ) {\n    if (this.config == null) {\n      this.config = { id: null };\n    }\n\n    this.config = {\n      ...this.config,\n      id: googleTagManagerId || this.config.id,\n      gtm_auth: googleTagManagerAuth || this.config.gtm_auth,\n      gtm_preview: googleTagManagerPreview || this.config.gtm_preview,\n    };\n    if (this.config.id == null) {\n      throw new Error('Google tag manager ID not provided.');\n    }\n  }\n\n  public getDataLayer(): any[] {\n    const window = this.browserGlobals.windowRef();\n    window.dataLayer = window.dataLayer || [];\n    return window.dataLayer;\n  }\n\n  private pushOnDataLayer(obj: object): void {\n    const dataLayer = this.getDataLayer();\n    dataLayer.push(obj);\n  }\n\n  public addGtmToDom(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this.isLoaded) {\n        return resolve(this.isLoaded);\n      }\n      const doc = this.browserGlobals.documentRef();\n      this.pushOnDataLayer({\n        'gtm.start': new Date().getTime(),\n        event: 'gtm.js',\n      });\n\n      const gtmScript = doc.createElement('script');\n      gtmScript.id = 'GTMscript';\n      gtmScript.async = true;\n      gtmScript.src = this.applyGtmQueryParams(\n        'https://www.googletagmanager.com/gtm.js'\n      );\n      gtmScript.addEventListener('load', () => {\n        return resolve(this.isLoaded = true);\n      });\n      gtmScript.addEventListener('error', () => {\n        return reject(false);\n      });\n      doc.head.insertBefore(gtmScript, doc.head.firstChild);\n    });\n  }\n\n  public pushTag(item: object): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (!this.isLoaded) {\n        this.addGtmToDom().then(() => {\n          this.pushOnDataLayer(item);\n          return resolve();\n        }).catch(() => reject());\n      }\n      this.pushOnDataLayer(item);\n      return resolve();\n    });\n  }\n\n  private applyGtmQueryParams(url: string): string {\n    if (url.indexOf('?') === -1) {\n      url += '?';\n    }\n\n    return (\n      url +\n      Object.keys(this.config)\n        .filter((k) => this.config[k])\n        .map((k) => `${k}=${this.config[k]}`)\n        .join('&')\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { GoogleTagManagerConfig } from './google-tag-manager-config';\n\n@NgModule()\nexport class GoogleTagManagerModule {\n  public static forRoot(\n    config: GoogleTagManagerConfig\n  ): ModuleWithProviders<GoogleTagManagerModule> {\n    return {\n      ngModule: GoogleTagManagerModule,\n      providers: [{ provide: 'googleTagManagerConfig', useValue: config }],\n    };\n  }\n}\n"]}